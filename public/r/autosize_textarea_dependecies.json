{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "autosize_textarea_dependecies",
  "type": "registry:ui",
  "title": "Autosize Textarea Dependencies",
  "description": "component for the Autosize Textarea Dependencies",
  "files": [
    {
      "path": "app/registry/spectrumui/autosize-textarea.tsx",
      "content": "'use client';\r\nimport * as React from 'react';\r\nimport { cn } from '@/lib/utils';\r\nimport { useImperativeHandle } from 'react';\r\n\r\ninterface UseAutosizeTextAreaProps {\r\n  textAreaRef: HTMLTextAreaElement | null;\r\n  minHeight?: number;\r\n  maxHeight?: number;\r\n  triggerAutoSize: string;\r\n}\r\n\r\nexport const useAutosizeTextArea = ({\r\n  textAreaRef,\r\n  triggerAutoSize,\r\n  maxHeight = Number.MAX_SAFE_INTEGER,\r\n  minHeight = 0,\r\n}: UseAutosizeTextAreaProps) => {\r\n  const [init, setInit] = React.useState(true);\r\n  React.useEffect(() => {\r\n    // We need to reset the height momentarily to get the correct scrollHeight for the textarea\r\n    const offsetBorder = 2;\r\n    if (textAreaRef) {\r\n      if (init) {\r\n        textAreaRef.style.minHeight = `${minHeight + offsetBorder}px`;\r\n        if (maxHeight > minHeight) {\r\n          textAreaRef.style.maxHeight = `${maxHeight}px`;\r\n        }\r\n        setInit(false);\r\n      }\r\n      textAreaRef.style.height = `${minHeight + offsetBorder}px`;\r\n      const scrollHeight = textAreaRef.scrollHeight;\r\n      // We then set the height directly, outside of the render loop\r\n      // Trying to set this with state or a ref will product an incorrect value.\r\n      if (scrollHeight > maxHeight) {\r\n        textAreaRef.style.height = `${maxHeight}px`;\r\n      } else {\r\n        textAreaRef.style.height = `${scrollHeight + offsetBorder}px`;\r\n      }\r\n    }\r\n  }, [textAreaRef, triggerAutoSize]);\r\n};\r\n\r\nexport type AutosizeTextAreaRef = {\r\n  textArea: HTMLTextAreaElement;\r\n  maxHeight: number;\r\n  minHeight: number;\r\n};\r\n\r\ntype AutosizeTextAreaProps = {\r\n  maxHeight?: number;\r\n  minHeight?: number;\r\n} & React.TextareaHTMLAttributes<HTMLTextAreaElement>;\r\n\r\nexport const AutosizeTextarea = React.forwardRef<AutosizeTextAreaRef, AutosizeTextAreaProps>(\r\n  (\r\n    {\r\n      maxHeight = Number.MAX_SAFE_INTEGER,\r\n      minHeight = 52,\r\n      className,\r\n      onChange,\r\n      value,\r\n      ...props\r\n    }: AutosizeTextAreaProps,\r\n    ref: React.Ref<AutosizeTextAreaRef>,\r\n  ) => {\r\n    const textAreaRef = React.useRef<HTMLTextAreaElement | null>(null);\r\n    const [triggerAutoSize, setTriggerAutoSize] = React.useState('');\r\n\r\n    useAutosizeTextArea({\r\n      textAreaRef: textAreaRef.current,\r\n      triggerAutoSize: triggerAutoSize,\r\n      maxHeight,\r\n      minHeight,\r\n    });\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      textArea: textAreaRef.current as HTMLTextAreaElement,\r\n      focus: () => textAreaRef?.current?.focus(),\r\n      maxHeight,\r\n      minHeight,\r\n    }));\r\n\r\n    React.useEffect(() => {\r\n      setTriggerAutoSize(value as string);\r\n    }, [props?.defaultValue, value]);\r\n\r\n    return (\r\n      <textarea\r\n        {...props}\r\n        value={value}\r\n        ref={textAreaRef}\r\n        className={cn(\r\n          'flex w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\r\n          className,\r\n        )}\r\n        onChange={(e) => {\r\n          setTriggerAutoSize(e.target.value);\r\n          onChange?.(e);\r\n        }}\r\n      />\r\n    );\r\n  },\r\n);\r\nAutosizeTextarea.displayName = 'AutosizeTextarea';\r\n",
      "type": "registry:ui",
      "target": "components/spectrumui/autosize-textarea.tsx"
    }
  ]
}