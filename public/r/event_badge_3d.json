{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event_badge_3d",
  "type": "registry:ui",
  "title": "Event Badge 3D",
  "description": "component for the Event Badge 3D",
  "dependencies": [
    "three",
    "@react-three/fiber",
    "@react-three/drei",
    "@react-three/rapier",
    "meshline",
    "leva"
  ],
  "files": [
    {
      "path": "app/registry/badge/badgedemo.tsx",
      "content": "\"use client\"\r\nimport * as THREE from \"three\"\r\nimport { useEffect, useRef, useState } from \"react\"\r\nimport { Canvas, extend, useThree, useFrame } from \"@react-three/fiber\"\r\nimport { useGLTF, useTexture, Environment, Lightformer } from \"@react-three/drei\"\r\nimport { BallCollider, CuboidCollider, Physics, RigidBody, useRopeJoint, useSphericalJoint } from \"@react-three/rapier\"\r\nimport { MeshLineGeometry, MeshLineMaterial, raycast } from 'meshline'\r\n\r\n\r\n\r\nextend({ MeshLineGeometry, MeshLineMaterial })\r\n\r\n\r\ndeclare global {\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      meshLineGeometry: any\r\n      meshLineMaterial: any\r\n    }\r\n  }\r\n}\r\n\r\n// Preload assets\r\nuseGLTF.preload(\r\n  \"https://assets.vercel.com/image/upload/contentful/image/e5382hct74si/5huRVDzcoDwnbgrKUo1Lzs/53b6dd7d6b4ffcdbd338fa60265949e1/tag.glb\",\r\n)\r\nuseTexture.preload(\r\n  \"https://assets.vercel.com/image/upload/contentful/image/e5382hct74si/SOT1hmCesOHxEYxL7vkoZ/c57b29c85912047c414311723320c16b/band.jpg\",\r\n)\r\n\r\nexport default function EventIdcard() {\r\n//   const { debug } = useControls({ debug: false })\r\n  return (\r\n<div className=\"w-full h-[500px]\">\r\n    <Canvas camera={{ position: [0, 0, 13], fov: 25 }}>\r\n      <ambientLight intensity={Math.PI} />\r\n      <Physics  interpolate gravity={[0, -40, 0]} timeStep={1 / 60}>\r\n        <Band />\r\n      </Physics>\r\n      <Environment background blur={0.75}>\r\n        <color attach=\"background\" args={[\"black\"]}  />\r\n        <Lightformer\r\n          intensity={2}\r\n          color=\"white\"\r\n          position={[0, -1, 5]}\r\n          rotation={[0, 0, Math.PI / 3]}\r\n          scale={[100, 0.1, 1]}\r\n        />\r\n        <Lightformer\r\n          intensity={3}\r\n          color=\"white\"\r\n          position={[-1, -1, 1]}\r\n          rotation={[0, 0, Math.PI / 3]}\r\n          scale={[100, 0.1, 1]}\r\n        />\r\n        <Lightformer\r\n          intensity={3}\r\n          color=\"white\"\r\n          position={[1, 1, 1]}\r\n          rotation={[0, 0, Math.PI / 3]}\r\n          scale={[100, 0.1, 1]}\r\n        />\r\n        <Lightformer\r\n          intensity={10}\r\n          color=\"white\"\r\n          position={[-10, 0, 14]}\r\n          rotation={[0, Math.PI / 2, Math.PI / 3]}\r\n          scale={[100, 10, 1]}\r\n        />\r\n      </Environment>\r\n    </Canvas>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\ntype GLTFResult = {\r\n  nodes: {\r\n    card: THREE.Mesh\r\n    clip: THREE.Mesh\r\n    clamp: THREE.Mesh\r\n  }\r\n  materials: {\r\n    base: THREE.MeshStandardMaterial\r\n    metal: THREE.MeshStandardMaterial\r\n  }\r\n}\r\n\r\n\r\ntype DragPosition = THREE.Vector3 | false\r\n\r\n\r\ntype RigidBodySegmentProps = {\r\n  type: \"dynamic\" | \"fixed\" | \"kinematicPosition\"\r\n  canSleep: boolean\r\n  colliders: \"ball\" | \"cuboid\" | \"hull\" | \"trimesh\" | false\r\n  angularDamping: number\r\n  linearDamping: number\r\n}\r\n\r\nfunction Band({ maxSpeed = 50, minSpeed = 10 }) {\r\n\r\n  const band = useRef<THREE.Mesh>(null)\r\n  const lineGeometry = useRef<MeshLineGeometry>(null)\r\n  const fixed = useRef<any>(null)\r\n  const j1 = useRef<any>(null)\r\n  const j2 = useRef<any>(null)\r\n  const j3 = useRef<any>(null)\r\n  const card = useRef<any>(null)\r\n\r\n\r\n  const vec = new THREE.Vector3()\r\n  const ang = new THREE.Vector3()\r\n  const rot = new THREE.Vector3()\r\n  const dir = new THREE.Vector3()\r\n\r\n  const segmentProps: RigidBodySegmentProps = {\r\n    type: \"dynamic\",\r\n    canSleep: true,\r\n    colliders: false,\r\n    angularDamping: 2,\r\n    linearDamping: 2,\r\n  }\r\n\r\n  const { nodes, materials } = useGLTF(\r\n    \"https://assets.vercel.com/image/upload/contentful/image/e5382hct74si/5huRVDzcoDwnbgrKUo1Lzs/53b6dd7d6b4ffcdbd338fa60265949e1/tag.glb\",\r\n  ) as unknown as GLTFResult\r\n  const texture = useTexture(\r\n    \"https://assets.vercel.com/image/upload/contentful/image/e5382hct74si/SOT1hmCesOHxEYxL7vkoZ/c57b29c85912047c414311723320c16b/band.jpg\",\r\n  )\r\n  const { width, height } = useThree((state) => state.size)\r\n  const [curve] = useState(\r\n    () =>\r\n      new THREE.CatmullRomCurve3([new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()]),\r\n  )\r\n  const [dragged, drag] = useState<DragPosition>(false)\r\n  const [hovered, hover] = useState(false)\r\n\r\n  useRopeJoint(fixed, j1, [[0, 0, 0], [0, 0, 0], 1])\r\n  useRopeJoint(j1, j2, [[0, 0, 0], [0, 0, 0], 1])\r\n  useRopeJoint(j2, j3, [[0, 0, 0], [0, 0, 0], 1])\r\n  useSphericalJoint(j3, card, [\r\n    [0, 0, 0],\r\n    [0, 1.45, 0],\r\n  ])\r\n\r\n  useEffect(() => {\r\n    if (hovered) {\r\n      document.body.style.cursor = dragged ? \"grabbing\" : \"grab\"\r\n      return () => void (document.body.style.cursor = \"auto\")\r\n    }\r\n  }, [hovered, dragged])\r\n\r\n  useFrame((state, delta) => {\r\n    if (dragged && card.current) {\r\n      vec.set(state.pointer.x, state.pointer.y, 0.5).unproject(state.camera)\r\n      dir.copy(vec).sub(state.camera.position).normalize()\r\n      vec.add(dir.multiplyScalar(state.camera.position.length()))\r\n      ;[card, j1, j2, j3, fixed].forEach((ref) => ref.current?.wakeUp())\r\n      card.current?.setNextKinematicTranslation({\r\n        x: vec.x - (dragged as THREE.Vector3).x,\r\n        y: vec.y - (dragged as THREE.Vector3).y,\r\n        z: vec.z - (dragged as THREE.Vector3).z,\r\n      })\r\n    }\r\n    if (fixed.current) {\r\n\r\n      ;[j1, j2].forEach((ref) => {\r\n        if (!ref.current.lerped) ref.current.lerped = new THREE.Vector3().copy(ref.current.translation())\r\n        const clampedDistance = Math.max(0.1, Math.min(1, ref.current.lerped.distanceTo(ref.current.translation())))\r\n        ref.current.lerped.lerp(ref.current.translation(), delta * (minSpeed + clampedDistance * (maxSpeed - minSpeed)))\r\n      })\r\n\r\n      curve.points[0].copy(j3.current.translation())\r\n      curve.points[1].copy(j2.current.lerped)\r\n      curve.points[2].copy(j1.current.lerped)\r\n      curve.points[3].copy(fixed.current.translation())\r\n\r\n\r\n      if (lineGeometry.current && lineGeometry.current.setPoints) {\r\n        const points = curve.getPoints(32);\r\n        lineGeometry.current.setPoints(points);\r\n      }\r\n\r\n\r\n      ang.copy(card.current.angvel())\r\n      rot.copy(card.current.rotation())\r\n      card.current.setAngvel({ x: ang.x, y: ang.y - rot.y * 0.25, z: ang.z })\r\n    }\r\n  })\r\n\r\n  curve.curveType = \"chordal\"\r\n  texture.wrapS = texture.wrapT = THREE.RepeatWrapping\r\n\r\n  return (\r\n    <>\r\n      <group position={[0, 4, 0]}>\r\n        <RigidBody ref={fixed} {...segmentProps} type=\"fixed\" />\r\n        <RigidBody position={[0.5, 0, 0]} ref={j1} {...segmentProps}>\r\n          <BallCollider args={[0.1]} />\r\n        </RigidBody>\r\n        <RigidBody position={[1, 0, 0]} ref={j2} {...segmentProps}>\r\n          <BallCollider args={[0.1]} />\r\n        </RigidBody>\r\n        <RigidBody position={[1.5, 0, 0]} ref={j3} {...segmentProps}>\r\n          <BallCollider args={[0.1]} />\r\n        </RigidBody>\r\n        <RigidBody position={[2, 0, 0]} ref={card} {...segmentProps} type={dragged ? \"kinematicPosition\" : \"dynamic\"}>\r\n          <CuboidCollider args={[0.8, 1.125, 0.01]} />\r\n          <group\r\n            scale={2.25}\r\n            position={[0, -1.2, -0.05]}\r\n            onPointerOver={() => hover(true)}\r\n            onPointerOut={() => hover(false)}\r\n            onPointerUp={(e: THREE.Event) => {\r\n              const target = e.target as HTMLElement\r\n              if (target instanceof HTMLElement) {\r\n                target.releasePointerCapture((e as unknown as globalThis.PointerEvent).pointerId)\r\n              }\r\n              drag(false)\r\n            }}\r\n            onPointerDown={(e: THREE.Event) => {\r\n              const target = e.target as HTMLElement\r\n              if (target instanceof HTMLElement) {\r\n                target.setPointerCapture((e as unknown as globalThis.PointerEvent).pointerId)\r\n              }\r\n              drag(\r\n                new THREE.Vector3()\r\n                  .copy((e as unknown as { point: THREE.Vector3 }).point)\r\n                  .sub(vec.copy(card.current.translation())),\r\n              )\r\n            }}\r\n          >\r\n            <mesh geometry={nodes.card.geometry}>\r\n              <meshPhysicalMaterial\r\n                map={materials.base.map}\r\n                map-anisotropy={16}\r\n                clearcoat={1}\r\n                clearcoatRoughness={0.15}\r\n                roughness={0.3}\r\n                metalness={0.5}\r\n              />\r\n            </mesh>\r\n            <mesh geometry={nodes.clip.geometry} material={materials.metal} material-roughness={0.3} />\r\n            <mesh geometry={nodes.clamp.geometry} material={materials.metal} />\r\n          </group>\r\n        </RigidBody>\r\n      </group>\r\n      <mesh ref={band}>\r\n        <bufferGeometry ref={lineGeometry} attach=\"geometry\" />\r\n        <lineBasicMaterial\r\n          attach=\"material\" \r\n          color=\"white\"\r\n          depthTest={false}\r\n          map={texture}\r\n          linewidth={1}\r\n        />\r\n      </mesh>\r\n    </>\r\n  )\r\n}",
      "type": "registry:ui",
      "target": "components/spectrumui/event_badge-3d.tsx"
    }
  ]
}