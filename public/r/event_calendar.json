{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event_calendar",
  "type": "registry:ui",
  "title": "Event Calendar",
  "description": "component for the Event Calendar",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "date-fns"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "app/registry/eventcalendar/demoevent.tsx",
      "content": "\"use client\";\r\nimport React from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { ChevronLeft, ChevronRight, Plus, X } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport Image from \"next/image\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  add,\r\n  eachDayOfInterval,\r\n  endOfMonth,\r\n  format,\r\n  isEqual,\r\n  isSameMonth,\r\n  isToday,\r\n  parse,\r\n  startOfMonth,\r\n  startOfWeek,\r\n  endOfWeek,\r\n} from \"date-fns\";\r\n\r\ninterface Subscription {\r\n  id: string;\r\n  name: string;\r\n  date: number;\r\n  icon: string;\r\n  color: string;\r\n}\r\ninterface SubscriptionDay {\r\n  date: Date;\r\n  subscriptions: Subscription[];\r\n  isCurrentMonth: boolean;\r\n}\r\nfunction EventCalendar() {\r\n  const [subscriptions, setSubscriptions] = React.useState<Subscription[]>([]);\r\n  const [currentMonth, setCurrentMonth] = React.useState(\r\n    format(new Date(), \"MMM-yyyy\")\r\n  );\r\n  const [isAddModalOpen, setIsAddModalOpen] = React.useState(false);\r\n  const firstDayCurrentMonth = parse(currentMonth, \"MMM-yyyy\", new Date());\r\n  const days = React.useMemo(() => {\r\n    const start = startOfWeek(startOfMonth(firstDayCurrentMonth));\r\n    const end = endOfWeek(endOfMonth(firstDayCurrentMonth));\r\n    return eachDayOfInterval({ start, end }).map(\r\n      (day): SubscriptionDay => ({\r\n        date: day,\r\n        subscriptions: subscriptions.filter(\r\n          (subscription) => subscription.date === day.getDate()\r\n        ),\r\n        isCurrentMonth: isSameMonth(day, firstDayCurrentMonth),\r\n      })\r\n    );\r\n  }, [firstDayCurrentMonth, subscriptions]);\r\n  function previousMonth() {\r\n    const firstDayNextMonth = add(firstDayCurrentMonth, { months: -1 });\r\n    setCurrentMonth(format(firstDayNextMonth, \"MMM-yyyy\"));\r\n  }\r\n  function nextMonth() {\r\n    const firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 });\r\n    setCurrentMonth(format(firstDayNextMonth, \"MMM-yyyy\"));\r\n  }\r\n  const handleAddSubscription = (newSubscription: Omit<Subscription, \"id\">) => {\r\n    const subscription = { ...newSubscription, id: Date.now().toString() };\r\n    setSubscriptions([...subscriptions, subscription]);\r\n  };\r\n  const handleRemoveSubscription = (id: string) => {\r\n    setSubscriptions(subscriptions.filter((sub) => sub.id !== id));\r\n  };\r\n  return (\r\n    <div className=\"p-4 mx-auto max-w-3xl\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"p-2 opacity-75 hover:opacity-100\"\r\n            onClick={previousMonth}\r\n          >\r\n            <ChevronLeft className=\"w-4 h-4\" />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"p-2 opacity-75 hover:opacity-100\"\r\n            onClick={nextMonth}\r\n          >\r\n            <ChevronRight className=\"w-4 h-4\" />\r\n          </Button>\r\n          <motion.h2\r\n            key={currentMonth}\r\n            initial={{ opacity: 0, y: -20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            className=\"text-xl font-semibold\"\r\n          >\r\n            {format(firstDayCurrentMonth, \"MMMM yyyy\")}\r\n          </motion.h2>\r\n        </div>\r\n        <Button onClick={() => setIsAddModalOpen(true)}>\r\n          <Plus className=\"w-4 h-4 mr-2\" />\r\n          Add Event\r\n        </Button>\r\n      </div>\r\n      <div className=\"grid grid-cols-7 gap-px bg-muted rounded-lg overflow-hidden\">\r\n        <AnimatePresence mode=\"wait\">\r\n          {[\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"].map((day) => (\r\n            <motion.div\r\n              key={day}\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              className=\"p-2 text-center text-sm font-medium bg-background\"\r\n            >\r\n              {day}\r\n            </motion.div>\r\n          ))}\r\n          {days.map((day, dayIdx) => (\r\n            <motion.div\r\n              key={format(day.date, \"yyyy-MM-dd\")}\r\n              initial={{ opacity: 0, scale: 0.95 }}\r\n              animate={{ opacity: 1, scale: 1 }}\r\n              transition={{ delay: dayIdx * 0.02 }}\r\n              className={cn(\r\n                \"relative p-2 bg-background min-h-[100px]\",\r\n                !day.isCurrentMonth && \"bg-muted/50\",\r\n                isEqual(day.date, new Date()) && \"bg-accent\"\r\n              )}\r\n            >\r\n              <time\r\n                dateTime={format(day.date, \"yyyy-MM-dd\")}\r\n                className={cn(\r\n                  \"text-sm\",\r\n                  isToday(day.date) && \"font-semibold text-primary\",\r\n                  !day.isCurrentMonth && \"text-muted-foreground\"\r\n                )}\r\n              >\r\n                {format(day.date, \"d\")}\r\n              </time>\r\n              <div className=\"space-y-1 mt-1\">\r\n                {day.subscriptions.map((subscription) => (\r\n                  <motion.div\r\n                    key={subscription.id}\r\n                    whileHover={{ scale: 1.05 }}\r\n                    className=\"flex items-center gap-1 p-1 rounded bg-background border text-sm group\"\r\n                    style={{ borderColor: subscription.color }}\r\n                  >\r\n                    <div className=\"relative w-4 h-4\">\r\n                      <Image\r\n                        src={subscription.icon }\r\n                        alt={subscription.name}\r\n                        className=\"rounded-sm object-cover\"\r\n                        fill\r\n                      />\r\n                    </div>\r\n                    <span className=\"text-xs truncate flex-1\">\r\n                      {subscription.name}\r\n                    </span>\r\n                    <button\r\n                      onClick={() => handleRemoveSubscription(subscription.id)}\r\n                      className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\r\n                    >\r\n                      <X className=\"w-3 h-3\" />\r\n                    </button>\r\n                  </motion.div>\r\n                ))}\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </AnimatePresence>\r\n      </div>\r\n      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Add New Event</DialogTitle>\r\n          </DialogHeader>\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              const formData = new FormData(e.currentTarget);\r\n              const name = formData.get(\"name\") as string;\r\n              const date = parseInt(formData.get(\"date\") as string);\r\n              const icon = formData.get(\"icon\") as string;\r\n              const color = formData.get(\"color\") as string;\r\n              handleAddSubscription({ name, date, icon, color });\r\n              setIsAddModalOpen(false);\r\n            }}\r\n            className=\"space-y-4\"\r\n          >\r\n            <div>\r\n              <Label htmlFor=\"name\">Event Name</Label>\r\n              <Input placeholder=\"Event Name\" id=\"name\" name=\"name\" required />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"date\">Enter Only Date</Label>\r\n              <Input\r\n                id=\"date\"\r\n                name=\"date\"\r\n                placeholder=\"Ex - 12\"\r\n                type=\"number\"\r\n                min={1}\r\n                max={31}\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"icon\">Icon URL</Label>\r\n              <Input placeholder=\"Icon URL\" id=\"icon\" name=\"icon\" required />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"color\">Color</Label>\r\n              <Input id=\"color\" name=\"color\" type=\"color\" required />\r\n            </div>\r\n            <Button type=\"submit\">Add Event</Button>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default EventCalendar",
      "type": "registry:ui",
      "target": "components/spectrumui/event-calendar"
    }
  ]
}