{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "feedback_demo",
  "type": "registry:ui",
  "title": "Feedback Demo",
  "description": "component for the Feedback Demo",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "app/registry/feedback/feedbackdemo.tsx",
      "content": "'use client'\r\n\r\nimport { Angry, Check, Frown, Laugh, Loader2, Smile } from 'lucide-react'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { AnimatePresence, motion } from 'framer-motion'\r\nimport { twMerge } from 'tailwind-merge'\r\nimport { cn } from '@/lib/utils'\r\n\r\nconst feedback = [\r\n  { happiness: 4, emoji: Laugh, color: 'text-green-600' },\r\n  { happiness: 3, emoji: Smile, color: 'text-green-400' },\r\n  { happiness: 2, emoji: Frown, color: 'text-yellow-400' },\r\n  { happiness: 1, emoji: Angry, color: 'text-red-600' }\r\n]\r\n\r\nexport const Feedback = () => {\r\n  const textRef = useRef<HTMLTextAreaElement>(null)\r\n  const [happiness, setHappiness] = useState<null | number>(null)\r\n\r\n  const [isSubmitted, setSubmissionState] = useState(false)\r\n  const { submitFeedback, isLoading, isSent } = useSubmitFeedback()\r\n\r\n  useEffect(() => {\r\n    if (!happiness) {\r\n      //cleaning up textarea\r\n      if (textRef.current) textRef.current!.value = ''\r\n    }\r\n  }, [happiness])\r\n\r\n  useEffect(() => {\r\n    let timeout = null\r\n    let submissionStateTimeout = null\r\n\r\n    if (isSent) {\r\n      setSubmissionState(true)\r\n\r\n      //cleaning up textarea and customer happiness state\r\n      timeout = setTimeout(() => {\r\n        setHappiness(null)\r\n        if (textRef.current) textRef.current!.value = ''\r\n      }, 2000)\r\n\r\n      //cleaning up successful submission text 100ms later\r\n      submissionStateTimeout = setTimeout(() => {\r\n        setSubmissionState(false)\r\n      }, 2200)\r\n    }\r\n\r\n    return () => {\r\n      if (timeout) {\r\n        clearTimeout(timeout)\r\n      }\r\n      if (submissionStateTimeout) {\r\n        clearTimeout(submissionStateTimeout)\r\n      }\r\n    }\r\n  }, [isSent])\r\n\r\n  return (\r\n    <motion.div\r\n      layout\r\n      initial={{ borderRadius: '2rem' }}\r\n      animate={happiness ? { borderRadius: '0.5rem' } : { borderRadius: '2rem' }}\r\n      className={twMerge(\r\n        'w-fit overflow-hidden border py-2 shadow-sm dark:border-neutral-800 dark:bg-neutral-950'\r\n      )}>\r\n      <span className=\"flex items-center justify-center gap-3 pl-4 pr-2\">\r\n        <div className=\"text-sm text-black dark:text-neutral-400\">Like our service?</div>\r\n        <div className=\"flex items-center text-neutral-400\">\r\n          {feedback.map((e) => {\r\n            const EmojiIcon = e.emoji\r\n            return (\r\n              <button\r\n                onClick={() => setHappiness((prev) => (e.happiness === prev ? null : e.happiness))}\r\n                className={twMerge(\r\n                  'flex h-9 w-9 items-center justify-center rounded-full transition-all',\r\n                  happiness === e.happiness ? e.color : 'text-neutral-500 dark:text-neutral-400'\r\n                )}\r\n                key={e.happiness}>\r\n                <EmojiIcon size={18} />\r\n              </button>\r\n            )\r\n          })}\r\n        </div>\r\n      </span>\r\n      <motion.div\r\n        aria-hidden={happiness ? false : true}\r\n        initial={{ height: 0, translateY: 15 }}\r\n        className=\"px-2\"\r\n        transition={{ ease: 'easeInOut', duration: 0.3 }}\r\n        animate={happiness ? { height: '195px', width: '330px' } : {}}>\r\n        <AnimatePresence>\r\n          {!isSubmitted ? (\r\n            <motion.span exit={{ opacity: 0 }} initial={{ opacity: 1 }}>\r\n              <textarea\r\n                ref={textRef}\r\n                placeholder=\"Your app is awesoooome\"\r\n                className=\"min-h-32 w-full resize-none rounded-md border bg-transparent p-2 text-sm placeholder-neutral-400 focus:border-neutral-400 focus:outline-0 dark:border-neutral-800 focus:dark:border-white\"\r\n              />\r\n              <div className=\"flex h-fit w-full justify-end\">\r\n                <button\r\n                  onClick={() => submitFeedback(happiness!, textRef.current!.value || '')}\r\n                  className={cn(\r\n                    'mt-1 flex h-9 items-center justify-center rounded-md border bg-neutral-950 px-2 text-sm text-white dark:bg-white dark:text-neutral-950',\r\n                    {\r\n                      'bg-neutral-500 dark:bg-white dark:text-neutral-500': isLoading\r\n                    }\r\n                  )}>\r\n                  {isLoading ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      Loading\r\n                    </>\r\n                  ) : (\r\n                    'Submit'\r\n                  )}\r\n                </button>\r\n              </div>\r\n            </motion.span>\r\n          ) : (\r\n            <motion.div\r\n              variants={container}\r\n              initial=\"hidden\"\r\n              animate=\"show\"\r\n              className=\"flex h-full w-full flex-col items-center justify-start gap-2 pt-9 text-sm font-normal\">\r\n              <motion.div\r\n                variants={item}\r\n                className=\"flex h-8 min-h-8 w-8 min-w-8 items-center justify-center rounded-full bg-blue-500 dark:bg-sky-500\">\r\n                <Check strokeWidth={2.5} size={16} className=\"stroke-white\" />\r\n              </motion.div>\r\n              <motion.div variants={item}>Your feedback has been received!</motion.div>\r\n              <motion.div variants={item}>Thank you for your help.</motion.div>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nconst container = {\r\n  hidden: { opacity: 0, y: 20 },\r\n  show: {\r\n    opacity: 1,\r\n    y: 0,\r\n    transition: {\r\n      duration: 0.2,\r\n      staggerChildren: 0.04\r\n    }\r\n  }\r\n}\r\n\r\nconst item = {\r\n  hidden: { y: 10 },\r\n  show: { y: 0 }\r\n}\r\n\r\nconst useSubmitFeedback = () => {\r\n  const [feedback, setFeedback] = useState<{ happiness: number; feedback: string } | null>(null)\r\n  const [isLoading, setLoadingState] = useState(false)\r\n  //error never happens in case of this mockup btw\r\n  const [error, setError] = useState<{ error: any } | null>(null)\r\n  const [isSent, setRequestState] = useState(false)\r\n\r\n  //fake api call\r\n  const submitFeedback = (feedback: { happiness: number; feedback: string }) =>\r\n    new Promise((res) => setTimeout(() => res(feedback), 1000))\r\n\r\n  useEffect(() => {\r\n    if (feedback) {\r\n      setLoadingState(true)\r\n      setRequestState(false)\r\n\r\n      submitFeedback(feedback)\r\n        .then(() => {\r\n          setRequestState(true)\r\n          setError(null)\r\n        })\r\n        .catch(() => {\r\n          setRequestState(false)\r\n          setError({ error: 'some error' })\r\n        })\r\n        .finally(() => setLoadingState(false))\r\n    }\r\n  }, [feedback])\r\n\r\n  return {\r\n    submitFeedback: (happiness: number, feedback: string) => setFeedback({ happiness, feedback }),\r\n    isLoading,\r\n    error,\r\n    isSent\r\n  }\r\n}",
      "type": "registry:ui",
      "target": "components/spectrumui/feedback-demo.tsx"
    }
  ]
}