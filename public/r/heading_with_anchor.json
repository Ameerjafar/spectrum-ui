{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "heading_with_anchor",
  "type": "registry:ui",
  "title": "Heading With Anchor",
  "description": "component for the Heading With Anchor",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "app/registry/spectrumui/heading-with-anchor.tsx",
      "content": "\"use client\";\r\nimport React from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { LinkIcon } from \"lucide-react\";\r\nimport Link from \"next/link\";\r\n\r\ntype AnchorProps = {\r\n  anchor?: string;\r\n  anchorVisibility?: \"hover\" | \"always\" | \"never\";\r\n  disableCopyToClipboard?: boolean;\r\n};\r\n\r\nconst Anchor = ({\r\n  anchor,\r\n  disableCopyToClipboard = false,\r\n  anchorVisibility = \"always\",\r\n}: AnchorProps) => {\r\n  function copyToClipboard() {\r\n    if (disableCopyToClipboard) return;\r\n    const currentUrl = window.location.href.replace(/#.*$/, \"\");\r\n    const urlWithId = `${currentUrl}#${anchor}`;\r\n\r\n    void navigator.clipboard.writeText(urlWithId);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"ms-2 pt-1\",\r\n        anchorVisibility === \"always\" && \"visible\",\r\n        anchorVisibility === \"never\" && \"hidden\",\r\n        anchorVisibility === \"hover\" && \"invisible group-hover:visible\"\r\n      )}\r\n    >\r\n   \r\n    </div>\r\n  );\r\n};\r\n\r\nconst headingVariants = cva(\"font-bold text-primary\", {\r\n  variants: {\r\n    variant: {\r\n      h1: \"leading-14 text-3xl \",\r\n      h2: \"leading-14 text-2xl \",\r\n      h3: \"leading-10 text-xl lg:text-3xl\",\r\n      h4: \"leading-8 text-lg \",\r\n      h5: \"leading-8 text-lg \",\r\n      h6: \"leading-7 text-sm \",\r\n      p: \"leading-5 text-lg  font-normal\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"h6\",\r\n  },\r\n});\r\n\r\ntype BaseHeadingProps = {\r\n  children?: React.ReactNode;\r\n  variant?: string;\r\n  className?: string;\r\n  asChild?: boolean;\r\n  anchor?: string;\r\n  anchorAlignment?: \"close\" | \"spaced\";\r\n  anchorVisibility?: \"hover\" | \"always\" | \"never\";\r\n  disableCopyToClipboard?: boolean;\r\n} & React.HTMLAttributes<HTMLHeadingElement> &\r\n  VariantProps<typeof headingVariants>;\r\n\r\nconst BaseHeading = ({\r\n  children,\r\n  className,\r\n  variant = \"h6\",\r\n  asChild = false,\r\n  anchor,\r\n  anchorAlignment = \"spaced\",\r\n  anchorVisibility = \"always\",\r\n  disableCopyToClipboard = false,\r\n  ...props\r\n}: BaseHeadingProps) => {\r\n  const Comp = asChild ? Slot : variant;\r\n  return (\r\n    <>\r\n      <Comp\r\n        id={anchor}\r\n        {...props}\r\n        className={cn(\r\n          anchor && \"flex scroll-m-20 items-center gap-1\", // modify `scroll-m-20` according to your header height.\r\n          anchorAlignment === \"spaced\" && \"justify-between\",\r\n          anchorVisibility === \"hover\" && \"group\",\r\n          headingVariants({ variant, className })\r\n        )}\r\n      >\r\n        {children}\r\n        {anchor && (\r\n          <Anchor\r\n            anchor={anchor}\r\n            anchorVisibility={anchorVisibility}\r\n            disableCopyToClipboard={disableCopyToClipboard}\r\n          />\r\n        )}\r\n      </Comp>\r\n    </>\r\n  );\r\n};\r\n\r\ntype TypographyProps = Omit<BaseHeadingProps, \"variant\" | \"asChild\">;\r\n\r\nconst H1 = (props: TypographyProps) => {\r\n  return <BaseHeading {...props} variant=\"h1\" />;\r\n};\r\n\r\nconst H2 = (props: TypographyProps) => {\r\n  return <BaseHeading {...props} variant=\"h2\" />;\r\n};\r\n\r\nconst H3 = (props: TypographyProps) => {\r\n  return <BaseHeading {...props} variant=\"h3\" />;\r\n};\r\n\r\nconst H4 = (props: TypographyProps) => {\r\n  return <BaseHeading {...props} variant=\"h4\" />;\r\n};\r\n\r\nconst H5 = (props: TypographyProps) => {\r\n  return <BaseHeading {...props} variant=\"h5\" />;\r\n};\r\n\r\nconst H6 = (props: TypographyProps) => {\r\n  return <BaseHeading {...props} variant=\"h6\" />;\r\n};\r\n\r\nconst P = (props: TypographyProps) => {\r\n  return <BaseHeading {...props} variant=\"p\" />;\r\n};\r\n\r\nexport { H1, H2, H3, H4, H5, H6, P };\r\n",
      "type": "registry:ui",
      "target": "components/spectrumui/heading-with-anchor.tsx"
    }
  ]
}