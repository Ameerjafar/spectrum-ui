{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "infinite_scroll_demo",
  "type": "registry:ui",
  "title": "Infinite Scroll Demo",
  "description": "component for the Infinite Scroll Demo",
  "registryDependencies": [
    "http://localhost:3000/r/infinite_scroll_dependecies.json"
  ],
  "files": [
    {
      "path": "app/registry/infinite-scroll/infinite-scroll-demo.tsx",
      "content": "'use client';\r\nimport React from 'react';\r\nimport InfiniteScroll from '@/components/ui/infinite-scroll';\r\nimport { Loader2 } from 'lucide-react';\r\n\r\ninterface DummyProductResponse {\r\n  products: DummyProduct[];\r\n  total: number;\r\n  skip: number;\r\n  limit: number;\r\n}\r\n\r\ninterface DummyProduct {\r\n  id: number;\r\n  title: string;\r\n  price: string;\r\n}\r\n\r\nconst Product = ({ product }: { product: DummyProduct }) => {\r\n  return (\r\n    <div className=\"flex w-full flex-col gap-2 rounded-lg border-2 border-gray-200 p-2\">\r\n      <div className=\"flex gap-2\">\r\n        <div className=\"flex flex-col justify-center gap-1\">\r\n          <div className=\"font-bold text-primary\">\r\n            {product.id} - {product.title}\r\n          </div>\r\n          <div className=\"text-sm text-muted-foreground\">{product.price}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst InfiniteScrollDemo = () => {\r\n  const [page, setPage] = React.useState(0);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [hasMore, setHasMore] = React.useState(true);\r\n  const [products, setProducts] = React.useState<DummyProduct[]>([]);\r\n\r\n  const next = async () => {\r\n    setLoading(true);\r\n\r\n    /**\r\n     * Intentionally delay the search by 800ms before execution so that you can see the loading spinner.\r\n     * In your app, you can remove this setTimeout.\r\n     **/\r\n    setTimeout(async () => {\r\n      const res = await fetch(\r\n        `https://dummyjson.com/products?limit=3&skip=${3 * page}&select=title,price`,\r\n      );\r\n      const data = (await res.json()) as DummyProductResponse;\r\n      setProducts((prev) => [...prev, ...data.products]);\r\n      setPage((prev) => prev + 1);\r\n\r\n      // Usually your response will tell you if there is no more data.\r\n      if (data.products.length < 3) {\r\n        setHasMore(false);\r\n      }\r\n      setLoading(false);\r\n    }, 800);\r\n  };\r\n  return (\r\n    <div className=\"max-h-[300px] w-full  overflow-y-auto px-10\">\r\n      <div className=\"flex w-full flex-col items-center  gap-3\">\r\n        {products.map((product) => (\r\n          <Product key={product.id} product={product} />\r\n        ))}\r\n        <InfiniteScroll hasMore={hasMore} isLoading={loading} next={next} threshold={1}>\r\n          {hasMore && <Loader2 className=\"my-4 h-8 w-8 animate-spin\" />}\r\n        </InfiniteScroll>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfiniteScrollDemo;\r\n",
      "type": "registry:ui",
      "target": "components/spectrumui/infinite-scroll.tsx"
    }
  ]
}