{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "infinite_scroll_dependecies",
  "type": "registry:ui",
  "title": "Infinite Scroll Dependencies",
  "description": "component for the Infinite Scroll Dependencies",
  "files": [
    {
      "path": "app/registry/spectrumui/infinite-scroll-dependecies.tsx",
      "content": "import * as React from 'react';\r\n\r\ninterface InfiniteScrollProps {\r\n  isLoading: boolean;\r\n  hasMore: boolean;\r\n  next: () => unknown;\r\n  threshold?: number;\r\n  root?: Element | Document | null;\r\n  rootMargin?: string;\r\n  reverse?: boolean;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport default function InfiniteScroll({\r\n  isLoading,\r\n  hasMore,\r\n  next,\r\n  threshold = 1,\r\n  root = null,\r\n  rootMargin = '0px',\r\n  reverse,\r\n  children,\r\n}: InfiniteScrollProps) {\r\n  const observer = React.useRef<IntersectionObserver>();\r\n  // This callback ref will be called when it is dispatched to an element or detached from an element,\r\n  // or when the callback function changes.\r\n  const observerRef = React.useCallback(\r\n    (element: HTMLElement | null) => {\r\n      let safeThreshold = threshold;\r\n      if (threshold < 0 || threshold > 1) {\r\n        console.warn(\r\n          'threshold should be between 0 and 1. You are exceed the range. will use default value: 1',\r\n        );\r\n        safeThreshold = 1;\r\n      }\r\n      // When isLoading is true, this callback will do nothing.\r\n      // It means that the next function will never be called.\r\n      // It is safe because the intersection observer has disconnected the previous element.\r\n      if (isLoading) return;\r\n\r\n      if (observer.current) observer.current.disconnect();\r\n      if (!element) return;\r\n\r\n      // Create a new IntersectionObserver instance because hasMore or next may be changed.\r\n      observer.current = new IntersectionObserver(\r\n        (entries) => {\r\n          if (entries[0].isIntersecting && hasMore) {\r\n            next();\r\n          }\r\n        },\r\n        { threshold: safeThreshold, root, rootMargin },\r\n      );\r\n      observer.current.observe(element);\r\n    },\r\n    [hasMore, isLoading, next, threshold, root, rootMargin],\r\n  );\r\n\r\n  const flattenChildren = React.useMemo(() => React.Children.toArray(children), [children]);\r\n\r\n  return (\r\n    <>\r\n      {flattenChildren.map((child, index) => {\r\n        if (!React.isValidElement(child)) {\r\n          process.env.NODE_ENV === 'development' &&\r\n            console.warn('You should use a valid element with InfiniteScroll');\r\n          return child;\r\n        }\r\n\r\n        const isObserveTarget = reverse ? index === 0 : index === flattenChildren.length - 1;\r\n        const ref = isObserveTarget ? observerRef : null;\r\n        // @ts-ignore ignore ref type\r\n        return React.cloneElement(child, { ref });\r\n      })}\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/spectrumui/infinite-scroll-dependecies.tsx"
    }
  ]
}