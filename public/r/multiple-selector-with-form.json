{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multiple-selector-with-form",
  "type": "registry:ui",
  "title": "Multiple Selector With Form",
  "description": "component for the Multiple Selector With Form",
  "dependencies": [
    "react-hook-form",
    "zod",
    "@hookform/resolvers"
  ],
  "registryDependencies": [
    "form",
    "https://ui.spectrumhq.in/r/use-toast.json",
    "https://ui.spectrumhq.in/r/loading-button.json",
    "https://ui.spectrumhq.in/r/multiple-selector-dependencies.json",
    ""
  ],
  "files": [
    {
      "path": "app/registry/multiple-selector/usage/multiple-selector-with-form.tsx",
      "content": "'use client';\r\n\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as z from 'zod';\r\nimport * as React from 'react';\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '@/components/ui/form';\r\nimport { toast } from '@/components/ui/use-toast';\r\nimport { LoadingButton } from '@/components/ui/loading-button';\r\nimport MultipleSelector, { Option } from '@/components/ui/multiple-selector';\r\n\r\nconst OPTIONS: Option[] = [\r\n  { label: 'nextjs', value: 'Nextjs' },\r\n  { label: 'React', value: 'react' },\r\n  { label: 'Remix', value: 'remix' },\r\n  { label: 'Vite', value: 'vite' },\r\n  { label: 'Nuxt', value: 'nuxt' },\r\n  { label: 'Vue', value: 'vue' },\r\n  { label: 'Svelte', value: 'svelte' },\r\n  { label: 'Angular', value: 'angular' },\r\n  { label: 'Ember', value: 'ember', disable: true },\r\n  { label: 'Gatsby', value: 'gatsby', disable: true },\r\n  { label: 'Astro', value: 'astro' },\r\n];\r\n\r\nconst optionSchema = z.object({\r\n  label: z.string(),\r\n  value: z.string(),\r\n  disable: z.boolean().optional(),\r\n});\r\n\r\nconst FormSchema = z.object({\r\n  frameworks: z.array(optionSchema).min(1),\r\n});\r\n\r\nconst MultipleSelectorWithForm = () => {\r\n  const form = useForm<z.infer<typeof FormSchema>>({\r\n    resolver: zodResolver(FormSchema),\r\n  });\r\n\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  function onSubmit(data: z.infer<typeof FormSchema>) {\r\n    setLoading(true);\r\n\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n      toast({\r\n        title: 'Your submitted data',\r\n        description: (\r\n          <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\r\n            <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\r\n          </pre>\r\n        ),\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\r\n        <FormField\r\n          control={form.control}\r\n          name=\"frameworks\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Frameworks</FormLabel>\r\n              <FormControl>\r\n                <MultipleSelector\r\n                  {...field}\r\n                  defaultOptions={OPTIONS}\r\n                  placeholder=\"Select frameworks you like...\"\r\n                  emptyIndicator={\r\n                    <p className=\"text-center text-lg leading-10 text-gray-600 dark:text-gray-400\">\r\n                      no results found.\r\n                    </p>\r\n                  }\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <LoadingButton loading={loading} type=\"submit\">\r\n          Submit\r\n        </LoadingButton>\r\n      </form>\r\n    </Form>\r\n  );\r\n};\r\nexport default MultipleSelectorWithForm;\r\n",
      "type": "registry:ui",
      "target": "components/spectrumui/multiple-selector-with-form.tsx"
    }
  ]
}